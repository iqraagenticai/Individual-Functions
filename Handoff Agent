#handoff
# lets create 2 agents 1 to write a subject of an email and 1 to covert the email in HTML format.
#convert both agents as tools using .as_tool construct.
from dotenv import load_dotenv
from openai import OpenAI
from agents import Agent, trace, Runner, function_tool
import os
import html
import sendgrid
from sendgrid import from_email
from agents import handoff_span, handoffs

#lets create the machine instructions
subject_instruction="You can write a subject for a cold sales email.\
    You are given a message and you need to write a subject for an email that is likely to get a response."

html_instruction="You can convert a text email boxy to an HTML email body.\
    You are given a text email body which might have some markdown and you \
        need to convert it to an html email body with simple, clear, compelling layout and design."

subject_agent=Agent(name="subject_agent",instructions=subject_instruction, model="gpt-4o-mini")
html_agent=Agent(name="html_agent", instructions=html_instruction, model="gpt-4o-mini")


#convert the agents to tools using as_tools
import html


subject_tool=subject_agent.as_tool(tool_name="subject_agent", tool_description="Write a subject for a cold sales email")
html_tool=html_agent.as_tool(tool_name="html_agent", tool_description="Convert a text email body to an HTML email body")


@function_tool
def send_html_email(subject: str, html_body: str):
    #below is the tool descriotion.
    """ Send out an email with the given subject and html body to all sales prospects """
    from_email=Email("Test@iqratech.site")
    to_email=To("Testrecepient@gmail.com")
    content=Content("text/plan", html_body)
    sg=sendgrid.SendGridAPIClient(api_key=os.environ.get('SENDGRID_API_KEY'))
    #trying a new method in sendgrid
    mail=Mail(from_email, to_email, subject, content)
    response = sg.send(mail)
    return {"Status": response.status_code}


    # mail=Mail(from_email="iqra@iqratech.site", to_emails="iqraagenticai@gmail.com", subject=subject, plain_text_content=html_body).get()
    # response=sg.client.mail.send.post(request_body=mail)
    # return {"status":"success"}


#use this in the handoff
tools=[subject_tool, html_tool, send_html_email]

#lets create a handoff
instructions="You are an email formatter and sender. You receive a body of an email to be sent.\
    You first use the subject_tool to add a subject, then use the html_tool to convert the body to an HTML format and then use send_html_email \
        to send the email with the subject and HTML body"

emailer_agent=Agent(name="Email Manager", instructions=instructions, model="gpt-4o-mini", handoff_description="Conver an email to HTML body format", tools=tools)
handoffs=[emailer_agent]

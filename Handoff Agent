#handoff
# lets create 2 agents 1 to write a subject of an email and 1 to covert the email in HTML format.
#convert both agents as tools using .as_tool construct.
from dotenv import load_dotenv
from openai import OpenAI
from agents import Agent, trace, Runner, function_tool
import os
import html
import sendgrid
from sendgrid import from_email
from agents import handoff_span, handoffs

#lets create the machine instructions
subject_instruction="You can write a subject for a cold sales email.\
    You are given a message and you need to write a subject for an email that is likely to get a response."

html_instruction="You can convert a text email boxy to an HTML email body.\
    You are given a text email body which might have some markdown and you \
        need to convert it to an html email body with simple, clear, compelling layout and design."

subject_agent=Agent(name="subject_agent",instructions=subject_instruction, model="gpt-4o-mini")
html_agent=Agent(name="html_agent", instructions=html_instruction, model="gpt-4o-mini")


#convert the agents to tools using as_tools
import html


subject_tool=subject_agent.as_tool(tool_name="subject_agent", tool_description="Write a subject for a cold sales email")
html_tool=html_agent.as_tool(tool_name="html_agent", tool_description="Convert a text email body to an HTML email body")


@function_tool
def send_html_email(subject: str, html_body: str):
    #below is the tool descriotion.
    """ Send out an email with the given subject and html body to all sales prospects """
    from_email=Email("Test@iqratech.site")
    to_email=To("Testrecepient@gmail.com")
    content=Content("text/plan", html_body)
    sg=sendgrid.SendGridAPIClient(api_key=os.environ.get('SENDGRID_API_KEY'))
    #trying a new method in sendgrid
    mail=Mail(from_email, to_email, subject, content)
    response = sg.send(mail)
    return {"Status": response.status_code}


    # mail=Mail(from_email="iqra@iqratech.site", to_emails="iqraagenticai@gmail.com", subject=subject, plain_text_content=html_body).get()
    # response=sg.client.mail.send.post(request_body=mail)
    # return {"status":"success"}


#use this in the handoff
tools=[subject_tool, html_tool, send_html_email]

#lets create a handoff
instructions="You are an email formatter and sender. You receive a body of an email to be sent.\
    You first use the subject_tool to add a subject, then use the html_tool to convert the body to an HTML format and then use send_html_email \
        to send the email with the subject and HTML body"

emailer_agent=Agent(name="Email Manager", instructions=instructions, model="gpt-4o-mini", handoff_description="Conver an email to HTML body format", tools=tools)
handoffs=[emailer_agent]

#now you can use previous email manager and send email using handoff
instructions1= "You are a Professional sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
      You write professional, serious cold emails."
instructions2="You are a funny sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
     You write Humourous cold emails. "
instructions3="You are a engaging and busy sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
     You write engaging cold emails that are like to get a resposne. "

sales_agent1=Agent(
    name="professional Sales Agent",
    instructions=instructions1,
    model= "gpt-4o-mini"
)

sales_agent2=Agent(
    name="Humourou Sales Agent",
    instructions=instructions2,
    model="gpt-4o-mini"
)

sales_agent3= Agent(
    name="Busy Sales Agent",
    instructions=instructions3,
    model="gpt-4o-mini"
)
#you can also convert agents as tool using the syntax as tool. It is shown below
description="Write a cold sales email"

tool1=sales_agent1.as_tool(tool_name="sales_agent1", tool_description=description)
tool2=sales_agent2.as_tool(tool_name="sales_agent2", tool_description=description)
tool3=sales_agent3.as_tool(tool_name="sales_agent3", tool_description=description)

tools=[tool1, tool2, tool3, send_email]

#end of tools creations.
sales_manager_instructions = """
You are a Sales Manager at Iqra Agentic AI soltions. Your goal is to find the single best cold sales email using the sales_agent tools.
 
Follow these steps carefully:
1. Generate Drafts: Use all three sales_agent tools to generate three different email drafts. Do not proceed until all three drafts are ready.
 
2. Evaluate and Select: Review the drafts and choose the single best email using your judgment of which one is most effective.
You can use the tools multiple times if you're not satisfied with the results from the first try.
 
3. Handoff for Sending: Pass ONLY the winning email draft to the 'Email Manager' agent. The Email Manager will take care of formatting and sending.
 
Crucial Rules:
- You must use the sales agent tools to generate the drafts — do not write them yourself.
- You must hand off exactly ONE email to the Email Manager — never more than one.
"""

sales_manager=Agent(name="Sales_manager", instructions=sales_manager_instructions, model="gpt-4o-mini", tools=tools, handoffs=handoffs)
message_or_instructions="Send out a cold sales email addressed o Dear CEO from Alice"

with trace("Automated SDR"):
    result=await Runner.run(sales_manager,message)

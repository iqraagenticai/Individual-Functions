#now lets add a tool similar to last time when we fetched information 
import asyncio
from agents import Agent, trace, Runner, function_tool
import sendgrid
from sendgrid.helpers.mail import Mail, Email, To, Content
from dotenv import load_dotenv
from openai import OpenAI

#save the keys in .env file
  

instructions1= "You are a Professional sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
      You write professional, serious cold emails."
instructions2="You are a funny sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
     You write Humourous cold emails. "
instructions3="You are a engaging and busy sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
     You write engaging cold emails that are like to get a resposne. "

sales_agent1=Agent(
    name="professional Sales Agent",
    instructions=instructions1,
    model= "gpt-4o-mini"
)

sales_agent2=Agent(
    name="Humourou Sales Agent",
    instructions=instructions2,
    model="gpt-4o-mini"
)

sales_agent3= Agent(
    name="Busy Sales Agent",
    instructions=instructions3,
    model="gpt-4o-mini"
)

#creating a tool using function_tool
# @function_tool is used on top of a fucntion because this fucnction gets added to the same Agent object and acts as additional 

@function_tool
def send_email(body:str):
    """ send out an email with the given body to all sales prospects"""
    sg=sendgrid.SendGridAPIClient(api_key=os.environ.get("SENDGRID_API_KEY"))
    from_email= Email("iqra@iqratech.site")
    to_email=To("iqraagenticaitest@gmail.com")
    content=content("text/plain", body)

    #add the send email command
    mail=Mail(from_email, to_email,"Sales Email",content).get()
    response = sg.client.mail.send.post(request_body=mail)
    return {"Status": "Success"}

#the below command will not send email since it has been converted as a fucntion tool for the agent
send_email


#you can also convert agents as tool using the syntax as tool. It is shown below
description="Write a cold sales email"

tool1=sales_agent1.as_tool(tool_name="sales_agent1", tool_description=description)
tool2=sales_agent2.as_tool(tool_name="sales_agent2", tool_description=description)
tool3=sales_agent3.as_tool(tool_name="sales_agent3", tool_description=description)

tools=[tool1, tool2, tool3, send_email]



#using another agent, use the previous convered tools and added tool as tools to the new agent and perform a task
instructions="You are a sales manager. You use the tools given to you to generate cold sales emails.\
    You can generate sales emails yourself but you always use the tools\
        you try all 3 sales_agents tools once before choosing the best one.\
            you pick the single best email and use the send_email tool to send the best email to the user"

sales_manager=Agent(name="Sales Manager", instructions=instructions, model="gpt-4o-mini", tools=tools)

message="Send a cold sales email addressed to 'Dear CEO'"

with trace("Sales Manager Email"):
    result=await Runner.run(sales_manager, message)


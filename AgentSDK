#import the following things.

from agents import Agent,Runner,trace
from agents import function_tool
import asyncio

#ResponseTextDeltaEvent stream back text
from openai.types.responses import ResponseTextDeltaEvent

#Creating and calling Agents
#the below are machine instructions
instructions1= "You are a busy sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
      You write professional, serious cold emails."
instructions2="You are a funny sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
     You write Humourous cold emails. "
instructions3="You are a engaging sales agent from the company called Iqra Agentic AI soltions. Offer AI solutions to the potential\
     You write engaging cold emails. "

#creation of agents
sales_agent1 = Agent(
        name="Professional Sales Agent",
        instructions=instructions1,
        model="gpt-4o-mini"
)

sales_agent2=Agent(name="Funny Sales Agent", instructions=instructions2, model="gpt-4o-mini")
sales_agent3=Agent(name="Engaging Sales Agent", model="gpt-4o-mini", instructions=instructions3)

result = Runner.run_streamed(sales_agent1, input="Write a cold sales email")
async for event in result.stream_events():
    if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
        print(event.data.delta, end="", flush=True)

result = Runner.run_streamed(sales_agent2, input="Write a cold sales email")
async for event in result.stream_events():
    if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
        print(event.data.delta, end="", flush=True)

result = Runner.run_streamed(sales_agent3, input="Write a cold sales email")
async for event in result.stream_events():
    if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
        print(event.data.delta, end="", flush=True)

message="Write a cold sale email"


#lets choose the best email using a picker
sales_picker=Agent(
    name="sales_pikcer",
    instructions="You pick the best cold sales email from the given options. \
        Imagine you are a customer and pick one that you are most like to reseponse to. \
            Do not give any explaination; reply with the selected email only",
    model="gpt-4o-mini"
)


#Trace all the things using sales picker separately.
with trace("selection from sales people"):
    results=await asyncio.gather(
        Runner.run(sales_agent1, message),
        Runner.run(sales_agent2, message),
        Runner.run(sales_agent3, message)
    )
    outputs=[result.final_output for result in results]

    emails="Cold Sales Emails:\n\n".join(outputs)

    best= await Runner.run(sales_picker, emails)

    print(f"Best email is :\n {best.final_output}")
